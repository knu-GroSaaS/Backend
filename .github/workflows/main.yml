name: Build, Deploy and Run Spring Boot App

on:
  push:
    branches:
      - master  # main 브랜치에 푸시될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle Wrapper 실행 권한 부여
      - name: Ensure Gradle Wrapper is executable
        run: chmod +x gradlew

      # 4. 애플리케이션 빌드
      - name: Build Spring Boot App
        run: ./gradlew clean build -x test

      # 5. sshpass 설치
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # 6. 원격 서버에 디렉토리 생성
      - name: Deploy to Server - Create Directory
        run: |
            sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no -p 50 admin@${{ secrets.HOST }} "echo '${{ secrets.PASSWORD }}' | sudo -S mkdir -p /home/admin/springboot/app.jar"

      # 7. 빌드된 JAR 파일을 원격 서버로 복사
      - name: Deploy to Server - Copy JAR File
        run: |
          sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no -P 50 build/libs/*.jar admin@${{ secrets.HOST }}:/home/admin/springboot/app.jar

      # 8. 기존 애플리케이션 종료 및 새 JAR 실행
      - name: Restart and Run Application
        run: |
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no -p 50 admin@${{ secrets.HOST }} "
          pkill -f 'java -jar /home/admin/springboot/app.jar' || echo 'No existing process to kill';
          nohup java -jar /home/admin/springboot/app.jar > /home/admin/springboot/app.log 2>&1 &"

      # 9. 애플리케이션 상태 확인
      - name: Check Application Status
        run: |
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no -p 50 admin@${{ secrets.HOST }} "
          sleep 5; # 애플리케이션 실행 대기
          ps aux | grep 'java -jar /home/admin/springboot/app.jar'"
